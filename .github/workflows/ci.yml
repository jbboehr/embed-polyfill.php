name: ci

on:
    push:
        branches:
            - master
            - develop
            - ci
    pull_request:
        branches:
            - master

permissions:
    contents: read

jobs:
    lint:
        runs-on: ubuntu-latest
        name: "Lint | PHP ${{ matrix.php-version }}"
        strategy:
            matrix:
                php-version:
                    - "8.1"
                    - "8.2"
                    - "8.3"
                    - "8.4"
        steps:
            -   uses: actions/checkout@v4

            -   name: Install PHP
                uses: shivammathur/setup-php@v2
                with:
                    coverage: "none"
                    php-version: "${{ matrix.php-version }}"
                    tools: composer:v2

            -   name: Validate composer.json and composer.lock
                run: composer validate --strict

            -   name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v4
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-

            -   name: Install dependencies
                run: composer install --prefer-dist --no-progress

            -   name: phpcs
                run: php vendor/bin/phpcs

            -   name: phpstan
                run: php vendor/bin/phpstan analyze

    test:
        runs-on: ubuntu-latest
        name: "Test | PHP ${{ matrix.php-version }}"
        strategy:
            matrix:
                php-version:
                    - "8.1"
                    - "8.2"
                    - "8.3"
                    - "8.4"
        steps:
            -   uses: actions/checkout@v4

            -   name: Install PHP
                uses: shivammathur/setup-php@v2
                with:
                    coverage: pcov
                    php-version: "${{ matrix.php-version }}"
                    tools: composer:v2

            -   name: Cache Composer packages
                id: composer-cache
                uses: actions/cache@v4
                with:
                    path: vendor
                    key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-

            -   name: Install dependencies
                run: composer install --prefer-dist --no-progress

            -   name: Run test suite
                run: php vendor/bin/phpunit --coverage-text --coverage-clover=clover.xml

            -   name: Coveralls
                uses: coverallsapp/github-action@v2
                with:
                    file: clover.xml
                    format: clover
                    parallel: true

    finish:
        needs: test
        if: ${{ always() }}
        runs-on: ubuntu-latest
        steps:
            -   name: Coveralls Finished
                uses: coverallsapp/github-action@v2
                with:
                    parallel-finished: true

    nix-matrix:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   uses: actions/checkout@v4
            -   uses: cachix/install-nix-action@v27
            -   id: set-matrix
                name: Generate Nix Matrix
                run: |
                    set -Eeu
                    matrix="$(nix eval --json '.#githubActions.matrix')"
                    echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

    nix:
        name: "nix (${{ matrix.name }})"
        runs-on: ${{ matrix.os }}
        needs: nix-matrix
        strategy:
            matrix: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
        steps:
            -   uses: actions/checkout@v4

            -   name: Set Up Build Cache
                uses: actions/cache@v4
                id: nix-cache
                with:
                    path: /tmp/nix-store.nar
                    key: nix-store.nar-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ matrix.attr }}
                    restore-keys: |
                        nix-store.nar-${{ runner.os }}-${{ hashFiles('flake.lock') }}-${{ matrix.attr }}
                        nix-store.nar-${{ runner.os }}-${{ hashFiles('flake.lock') }}-
                        nix-store.nar-${{ runner.os }}-

            -   uses: cachix/install-nix-action@v27
                with:
                    nix_path: nixpkgs=channel:nixos-24.05

            -   name: Import Nix Store Cache
                if: "steps.nix-cache.outputs.cache-hit == 'true'"
                run: |
                    nix-store --import < /tmp/nix-store.nar

            -   run: nix build -L ".#${{ matrix.attr }}"

            -   run: find -L result*; cp result-coverage/coverage.info coverage.info || true

            #            -   name: Upload coverage reports to Codecov
            #                if: ${{ hashFiles('coverage.info') != '' }}
            #                uses: codecov/codecov-action@v4
            #                with:
            #                    file: coverage.info
            #                    token: ${{ secrets.CODECOV_TOKEN }}
            #                    slug: jbboehr/php-perfifidous
            #
            #            -   name: Coveralls
            #                if: ${{ hashFiles('coverage.info') != '' }}
            #                uses: coverallsapp/github-action@v2
            #                continue-on-error: true
            #                with:
            #                    file: coverage.info
            #                    format: lcov
            #                    parallel: true

            -   name: Export Nix Store Cache
                shell: bash
                # partially based on https://github.com/NixOS/nix/issues/1245#issuecomment-282586759
                run: |
                    drv="$(nix-store -qd "$(readlink result)")"
                    drvRefs="$( echo "$drv" | xargs nix-store -q --references )"
                    ( echo "$drvRefs" | grep '[.]drv$' | xargs nix-store -q --outputs ;
                      echo "$drvRefs" | grep -v '[.]drv$' ) | \
                        xargs nix-store -r | \
                        xargs nix-store -qR |
                        xargs nix-store --export > /tmp/nix-store.nar
